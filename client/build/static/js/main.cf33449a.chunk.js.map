{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","error","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","handleFormSubmit","event","preventDefault","mutationResponse","log","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cf33449a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","//TODO: HELPER FUNCITONS\n//! Pluralize names\nexport function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\n//! Open the connection to the database, connect it to the object store (storeName) and perform a transaction (method, object)\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    //* open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    //* create variables to hold reference to the database, transaction (tx) and object store\n    let db, tx, store;\n\n    //* if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    //* handle any errors with connecting\n    request.onerror = function (e) {\n      console.error('There was an error');\n    };\n\n    //* on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a new transaction and do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if theres any errors, let us know\n      db.onerror = function (e) {\n        console.error('error', e);\n      };\n\n      // check which value was passing in as a `method` and perform that method on the object store\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.error('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}\n","//TODO: REDUX REDUCERS\n//! Import dependencies\nimport { useReducer } from 'react';\n\n//! Import actions\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n//! Reducer function to update products list\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    //* if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n    //* if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n    //* if action type value is the value of `UPDATE_CURRENT_CATEGORY`, return a new state object with an updated string\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n    //* if action type value is the value of `ADD_TO_CART`, return a new state object with an updated cart array and the products\n    case ADD_TO_CART:\n      return {\n        ...state, // preserve everything else on state\n        cartOpen: true, // users can immediately view the cart with the newly added items\n        cart: [...state.cart, action.product],\n      };\n    //* if action type value is the value of `ADD_MULTIPLE_TO_CART`, return a new state object with an updated cart array and the products\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    //* Reducer function for action type value `REMOVE_FROM_CART`\n    case REMOVE_FROM_CART:\n      // only keep items that dont match the _id property\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0, // set cartOpen to true as long as the newState length is > 0\n        cart: newState,\n      };\n    //* Reducer function for action type value `UPDATE_CART_QUANTITY`\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n    //* Reducer function for action type value `CLEAR_CART`\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n    //* Reducer function for action type value `TOGGLE_CART`\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n      \n    //* if it's none of these actions, do not update state at all and keep things the same\n    default:\n      return state;\n  }\n};\n\n//! Export reducers\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n","//TODO: REDUX ACTIONS\n\n//! DEFINE ACTIONS\n//* Store data retrieved for products from Apollo in the state created by UPDATE_PRODUCTS action\nexport const UPDATE_PRODUCTS = 'UPDATE PRODUCTS';\n//* Store data retrieved for categories from Apollo in the state created by UPDATE_CATEGORIES action\nexport const UPDATE_CATEGORIES = 'UPDATE CATEGORIES';\n//* Select a category from the state created by UPDATE_CATEGORIES action and display products for that category from the list created by the UPDATE_PRODUCTS action\nexport const UPDATE_CURRENT_CATEGORY = 'UPDATE CURRENT_CATEGORY';\nexport const ADD_TO_CART = 'ADD TO CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD MULTIPLE TO CART';\nexport const REMOVE_FROM_CART = 'REMOVE FROM CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE CART QUANTITY';\nexport const CLEAR_CART = 'CLEAR CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n\n","//TODO: CREATE A GLOBAL STATE THAT MAKES STATEFUL DATA AVAILABLE ACROSS UNRELATED COMPONENTS\n//! Import dependencies\nimport React, { createContext, useContext } from 'react'; //? createContext: create the container that holds the golbal state data and functionality. useContext: allows you to use the state created from the createContext function\nimport { useProductReducer } from './reducers';\n\n//! Create the global state object\nconst StoreContext = createContext();\nconst { Provider } = StoreContext; //? Every Context object comes with a Provide and Consumer. Provider makes state data passed in available to all components. Consumer grabs and uses the Provider data\n\n//! Function to manage and update state\nconst StoreProvider = ({ value = [], ...props }) => {\n  //* create initial global state\n  //? state: most up-to date version of global state object. dispatch: method to update our state\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n  });\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\n//! Function to be used by the components that need the data from the StoreProvider function\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\n//! Export StoreProvide and useStoreContext\nexport { StoreProvider, useStoreContext };\n","//TODO: PRODUCT ITEM COMPONENT\n//! Import dependencies\nimport React from 'react';\nimport { idbPromise } from '../../utils/helpers';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { Link } from 'react-router-dom';\nimport { pluralize } from '../../utils/helpers';\n\n//! Create ProductItem component\nfunction ProductItem(item) {\n  const { image, name, _id, price, quantity } = item;\n  const [state, dispatch] = useStoreContext();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === _id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img alt={name} src={`/images/${image}`} />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>\n          {quantity} {pluralize('item', quantity)} in stock\n        </div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","'TODO: QUERIES';\n'Import dependencies';\nimport { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n","//TODO: PRODUCT LIST COMPONENT DISPLAYS PRODUCTS FROM APOLLO QUERY\n//! Import dependencies\nimport React, { useEffect } from 'react';\nimport { idbPromise } from '../../utils/helpers';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\n//! Create ProductList component\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    //* if theres data stored\n    if (data) {\n      // store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      // but let's also take each product and save it to IndexedDB using the helper function\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n      //* add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then(products => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      product => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map(product => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","//TODO: CATEGORY MENU COMPONENT KEEPS TRACK OF CATEGORY LIST FROM APOLLO QUERY\n//! Import dependencies\nimport React, { useEffect } from 'react';\nimport { idbPromise } from '../../utils/helpers';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from '../../utils/GlobalState';\n\n//! Create CategoryMenu component function\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    //* if categoryData exists of has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      //* execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('category', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  //* update the click handler to update our global state instead of using the function we receive as a prop from the Home component\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}>\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { idbPromise } from '../../utils/helpers';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nconst CartItem = ({ item }) => {\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id,\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = e => {\n    const value = e.target.value;\n\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id,\n      });\n\n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value),\n      });\n\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img src={`/images/${item.image}`} alt=\"\" />\n      </div>\n      <div>\n        <div>\n          {item.name}, ${item.price}\n        </div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}>\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;\n","//TODO: DECODE JSON WEB TOKEN (JWT)\n//! Import dependencies\nimport decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { idbPromise } from '../../utils/helpers';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then(res => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  //* add up the prices of everything saved in `state.cart`\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach(item => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","//TODO: HOME PAGE COMPONENT KEEPS TRACK OF CURRENT CATEGORY WE ARE VIEWING\n//! Import dependencies\nimport React from 'react';\nimport ProductList from '../components/ProductList';\nimport CategoryMenu from '../components/CategoryMenu';\nimport Cart from '../components/Cart';\n\n//! Create Home component\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","//TODO: PRODUCT DETAIL PAGE COMPONENT\n//! Import dependencies\nimport React, { useEffect, useState } from 'react';\nimport { idbPromise } from '../utils/helpers';\nimport { useStoreContext } from '../utils/GlobalState';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport Cart from '../components/Cart';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    //* already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } //* retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } //* get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then(indexedProducts => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      //* if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      //* if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    //* upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}>\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","//TODO: JUMBOTRON COMPONENT\n//! Import dependencies\nimport React from \"react\";\n\n//! Make the Jumbotron component\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","//TODO: NO PAGE FOUND PAGE COMPONENT\n//! Import dependencies\nimport React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","\"TODO: MUTATIONS\"\n\"Import dependencies\"\nimport { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","//TODO: LOGIN PAGE COMPONENT\n//! Import dependencies\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","//TODO: SIGNUP PAGE COMPONENT\n//! Import dependencies\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","//TODO: NAVIGATION COMPONENT\n//! Import dependencies\nimport React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\n//! Create Navigation component\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","//TODO: ORDER HISTORY PAGE COMPONENT\n//! Import dependencies\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_ORDER } from '../utils/mutations';\nimport Jumbotron from '../components/Jumbotron';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map(item => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach(item => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the homepage</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","//TODO: MAIN COMPONENT\n//! Import dependencies\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\nimport OrderHistory from './pages/OrderHistory';\nimport Success from './pages/Success';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","//TODO: SERVICE WORKER\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//TODO: COMPONENT TO ACCESS THE DOM\n//! Import dependencies\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}